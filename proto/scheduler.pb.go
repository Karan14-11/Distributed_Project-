// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: proto/scheduler.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HeartbeatRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Port          int32                  `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	mi := &file_proto_scheduler_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{0}
}

func (x *HeartbeatRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type TaskStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Result        int32                  `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskStatus) Reset() {
	*x = TaskStatus{}
	mi := &file_proto_scheduler_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatus) ProtoMessage() {}

func (x *TaskStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatus.ProtoReflect.Descriptor instead.
func (*TaskStatus) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{1}
}

func (x *TaskStatus) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *TaskStatus) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type Task_Query struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TaskType       int32                  `protobuf:"varint,1,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	DataQuery      string                 `protobuf:"bytes,2,opt,name=data_query,json=dataQuery,proto3" json:"data_query,omitempty"`
	Priority       int32                  `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	DependencyList []int32                `protobuf:"varint,4,rep,packed,name=dependency_list,json=dependencyList,proto3" json:"dependency_list,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Task_Query) Reset() {
	*x = Task_Query{}
	mi := &file_proto_scheduler_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Query) ProtoMessage() {}

func (x *Task_Query) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Query.ProtoReflect.Descriptor instead.
func (*Task_Query) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{2}
}

func (x *Task_Query) GetTaskType() int32 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *Task_Query) GetDataQuery() string {
	if x != nil {
		return x.DataQuery
	}
	return ""
}

func (x *Task_Query) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Task_Query) GetDependencyList() []int32 {
	if x != nil {
		return x.DependencyList
	}
	return nil
}

type Task_Reply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        int32                  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Result        int32                  `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task_Reply) Reset() {
	*x = Task_Reply{}
	mi := &file_proto_scheduler_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task_Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Reply) ProtoMessage() {}

func (x *Task_Reply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Reply.ProtoReflect.Descriptor instead.
func (*Task_Reply) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{3}
}

func (x *Task_Reply) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Task_Reply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type NodeList struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	NodesPort      []int32                  `protobuf:"varint,1,rep,packed,name=nodes_port,json=nodesPort,proto3" json:"nodes_port,omitempty"`
	LeaderPort     int32                    `protobuf:"varint,2,opt,name=leader_port,json=leaderPort,proto3" json:"leader_port,omitempty"`
	ClientPort     int32                    `protobuf:"varint,3,opt,name=client_port,json=clientPort,proto3" json:"client_port,omitempty"`
	TaskId         int32                    `protobuf:"varint,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // task id sstarter
	TaskQueue      map[int32]*NodeList_Task `protobuf:"bytes,5,rep,name=taskQueue,proto3" json:"taskQueue,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	WorkerLoads    map[int32]float32        `protobuf:"bytes,6,rep,name=workerLoads,proto3" json:"workerLoads,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`                  // Changed to float for CPU percentage
	TimerWorker    map[int32]string         `protobuf:"bytes,7,rep,name=timer_worker,json=timerWorker,proto3" json:"timer_worker,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Assuming time is represented as a string
	TaskCompletion map[int32]bool           `protobuf:"bytes,8,rep,name=taskCompletion,proto3" json:"taskCompletion,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TaskResult     map[int32]int32          `protobuf:"bytes,9,rep,name=taskResult,proto3" json:"taskResult,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Changed to int32 for task id
	TaskAssign     map[int32]*NodeList_Task `protobuf:"bytes,10,rep,name=taskAssign,proto3" json:"taskAssign,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NodeList) Reset() {
	*x = NodeList{}
	mi := &file_proto_scheduler_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeList) ProtoMessage() {}

func (x *NodeList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeList.ProtoReflect.Descriptor instead.
func (*NodeList) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{4}
}

func (x *NodeList) GetNodesPort() []int32 {
	if x != nil {
		return x.NodesPort
	}
	return nil
}

func (x *NodeList) GetLeaderPort() int32 {
	if x != nil {
		return x.LeaderPort
	}
	return 0
}

func (x *NodeList) GetClientPort() int32 {
	if x != nil {
		return x.ClientPort
	}
	return 0
}

func (x *NodeList) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *NodeList) GetTaskQueue() map[int32]*NodeList_Task {
	if x != nil {
		return x.TaskQueue
	}
	return nil
}

func (x *NodeList) GetWorkerLoads() map[int32]float32 {
	if x != nil {
		return x.WorkerLoads
	}
	return nil
}

func (x *NodeList) GetTimerWorker() map[int32]string {
	if x != nil {
		return x.TimerWorker
	}
	return nil
}

func (x *NodeList) GetTaskCompletion() map[int32]bool {
	if x != nil {
		return x.TaskCompletion
	}
	return nil
}

func (x *NodeList) GetTaskResult() map[int32]int32 {
	if x != nil {
		return x.TaskResult
	}
	return nil
}

func (x *NodeList) GetTaskAssign() map[int32]*NodeList_Task {
	if x != nil {
		return x.TaskAssign
	}
	return nil
}

type RequestVoteArgs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          int32                  `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	CandidateId   int32                  `protobuf:"varint,2,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestVoteArgs) Reset() {
	*x = RequestVoteArgs{}
	mi := &file_proto_scheduler_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVoteArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVoteArgs) ProtoMessage() {}

func (x *RequestVoteArgs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVoteArgs.ProtoReflect.Descriptor instead.
func (*RequestVoteArgs) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{5}
}

func (x *RequestVoteArgs) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RequestVoteArgs) GetCandidateId() int32 {
	if x != nil {
		return x.CandidateId
	}
	return 0
}

type RequestVoteReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          int32                  `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	VoteGranted   bool                   `protobuf:"varint,2,opt,name=vote_granted,json=voteGranted,proto3" json:"vote_granted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestVoteReply) Reset() {
	*x = RequestVoteReply{}
	mi := &file_proto_scheduler_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVoteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVoteReply) ProtoMessage() {}

func (x *RequestVoteReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVoteReply.ProtoReflect.Descriptor instead.
func (*RequestVoteReply) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{6}
}

func (x *RequestVoteReply) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RequestVoteReply) GetVoteGranted() bool {
	if x != nil {
		return x.VoteGranted
	}
	return false
}

type WorkerLoad struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Port          int32                  `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Load          int32                  `protobuf:"varint,2,opt,name=load,proto3" json:"load,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerLoad) Reset() {
	*x = WorkerLoad{}
	mi := &file_proto_scheduler_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerLoad) ProtoMessage() {}

func (x *WorkerLoad) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerLoad.ProtoReflect.Descriptor instead.
func (*WorkerLoad) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{7}
}

func (x *WorkerLoad) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *WorkerLoad) GetLoad() int32 {
	if x != nil {
		return x.Load
	}
	return 0
}

type TaskAssignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        int32                  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskType      int32                  `protobuf:"varint,2,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	Query         string                 `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Priority      int32                  `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskAssignment) Reset() {
	*x = TaskAssignment{}
	mi := &file_proto_scheduler_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAssignment) ProtoMessage() {}

func (x *TaskAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAssignment.ProtoReflect.Descriptor instead.
func (*TaskAssignment) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{8}
}

func (x *TaskAssignment) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskAssignment) GetTaskType() int32 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *TaskAssignment) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *TaskAssignment) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type TaskAssignmentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskAssignmentResponse) Reset() {
	*x = TaskAssignmentResponse{}
	mi := &file_proto_scheduler_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskAssignmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAssignmentResponse) ProtoMessage() {}

func (x *TaskAssignmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAssignmentResponse.ProtoReflect.Descriptor instead.
func (*TaskAssignmentResponse) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{9}
}

func (x *TaskAssignmentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_proto_scheduler_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{10}
}

type ServerPort struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Port          int32                  `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerPort) Reset() {
	*x = ServerPort{}
	mi := &file_proto_scheduler_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerPort) ProtoMessage() {}

func (x *ServerPort) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerPort.ProtoReflect.Descriptor instead.
func (*ServerPort) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{11}
}

func (x *ServerPort) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ClientPort struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Port          int32                  `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientPort) Reset() {
	*x = ClientPort{}
	mi := &file_proto_scheduler_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPort) ProtoMessage() {}

func (x *ClientPort) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPort.ProtoReflect.Descriptor instead.
func (*ClientPort) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{12}
}

func (x *ClientPort) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type RaftServer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	IsVoter       bool                   `protobuf:"varint,3,opt,name=is_voter,json=isVoter,proto3" json:"is_voter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftServer) Reset() {
	*x = RaftServer{}
	mi := &file_proto_scheduler_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftServer) ProtoMessage() {}

func (x *RaftServer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftServer.ProtoReflect.Descriptor instead.
func (*RaftServer) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{13}
}

func (x *RaftServer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RaftServer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RaftServer) GetIsVoter() bool {
	if x != nil {
		return x.IsVoter
	}
	return false
}

type RaftConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Servers       []*RaftServer          `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftConfiguration) Reset() {
	*x = RaftConfiguration{}
	mi := &file_proto_scheduler_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftConfiguration) ProtoMessage() {}

func (x *RaftConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftConfiguration.ProtoReflect.Descriptor instead.
func (*RaftConfiguration) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{14}
}

func (x *RaftConfiguration) GetServers() []*RaftServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

type AddVoterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddVoterRequest) Reset() {
	*x = AddVoterRequest{}
	mi := &file_proto_scheduler_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddVoterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVoterRequest) ProtoMessage() {}

func (x *AddVoterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVoterRequest.ProtoReflect.Descriptor instead.
func (*AddVoterRequest) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{15}
}

func (x *AddVoterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddVoterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type NodeList_Task struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TaskType       int32                  `protobuf:"varint,2,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	Priority       int32                  `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	Query          string                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	AssignedTo     int32                  `protobuf:"varint,5,opt,name=assigned_to,json=assignedTo,proto3" json:"assigned_to,omitempty"`
	Status         bool                   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	DependencyList []int32                `protobuf:"varint,7,rep,packed,name=dependency_list,json=dependencyList,proto3" json:"dependency_list,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NodeList_Task) Reset() {
	*x = NodeList_Task{}
	mi := &file_proto_scheduler_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeList_Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeList_Task) ProtoMessage() {}

func (x *NodeList_Task) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeList_Task.ProtoReflect.Descriptor instead.
func (*NodeList_Task) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{4, 0}
}

func (x *NodeList_Task) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NodeList_Task) GetTaskType() int32 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *NodeList_Task) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *NodeList_Task) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *NodeList_Task) GetAssignedTo() int32 {
	if x != nil {
		return x.AssignedTo
	}
	return 0
}

func (x *NodeList_Task) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *NodeList_Task) GetDependencyList() []int32 {
	if x != nil {
		return x.DependencyList
	}
	return nil
}

var File_proto_scheduler_proto protoreflect.FileDescriptor

const file_proto_scheduler_proto_rawDesc = "" +
	"\n" +
	"\x15proto/scheduler.proto\x12\tscheduler\"&\n" +
	"\x10HeartbeatRequest\x12\x12\n" +
	"\x04port\x18\x01 \x01(\x05R\x04port\"<\n" +
	"\n" +
	"TaskStatus\x12\x16\n" +
	"\x06status\x18\x01 \x01(\bR\x06status\x12\x16\n" +
	"\x06result\x18\x02 \x01(\x05R\x06result\"\x8d\x01\n" +
	"\n" +
	"Task_Query\x12\x1b\n" +
	"\ttask_type\x18\x01 \x01(\x05R\btaskType\x12\x1d\n" +
	"\n" +
	"data_query\x18\x02 \x01(\tR\tdataQuery\x12\x1a\n" +
	"\bpriority\x18\x03 \x01(\x05R\bpriority\x12'\n" +
	"\x0fdependency_list\x18\x04 \x03(\x05R\x0edependencyList\"=\n" +
	"\n" +
	"Task_Reply\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\x05R\x06taskId\x12\x16\n" +
	"\x06result\x18\x02 \x01(\x05R\x06result\"\xaf\t\n" +
	"\bNodeList\x12\x1d\n" +
	"\n" +
	"nodes_port\x18\x01 \x03(\x05R\tnodesPort\x12\x1f\n" +
	"\vleader_port\x18\x02 \x01(\x05R\n" +
	"leaderPort\x12\x1f\n" +
	"\vclient_port\x18\x03 \x01(\x05R\n" +
	"clientPort\x12\x17\n" +
	"\atask_id\x18\x04 \x01(\x05R\x06taskId\x12@\n" +
	"\ttaskQueue\x18\x05 \x03(\v2\".scheduler.NodeList.TaskQueueEntryR\ttaskQueue\x12F\n" +
	"\vworkerLoads\x18\x06 \x03(\v2$.scheduler.NodeList.WorkerLoadsEntryR\vworkerLoads\x12G\n" +
	"\ftimer_worker\x18\a \x03(\v2$.scheduler.NodeList.TimerWorkerEntryR\vtimerWorker\x12O\n" +
	"\x0etaskCompletion\x18\b \x03(\v2'.scheduler.NodeList.TaskCompletionEntryR\x0etaskCompletion\x12C\n" +
	"\n" +
	"taskResult\x18\t \x03(\v2#.scheduler.NodeList.TaskResultEntryR\n" +
	"taskResult\x12C\n" +
	"\n" +
	"taskAssign\x18\n" +
	" \x03(\v2#.scheduler.NodeList.TaskAssignEntryR\n" +
	"taskAssign\x1a\xc7\x01\n" +
	"\x04Task\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x1b\n" +
	"\ttask_type\x18\x02 \x01(\x05R\btaskType\x12\x1a\n" +
	"\bpriority\x18\x03 \x01(\x05R\bpriority\x12\x14\n" +
	"\x05query\x18\x04 \x01(\tR\x05query\x12\x1f\n" +
	"\vassigned_to\x18\x05 \x01(\x05R\n" +
	"assignedTo\x12\x16\n" +
	"\x06status\x18\x06 \x01(\bR\x06status\x12'\n" +
	"\x0fdependency_list\x18\a \x03(\x05R\x0edependencyList\x1aV\n" +
	"\x0eTaskQueueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.scheduler.NodeList.TaskR\x05value:\x028\x01\x1a>\n" +
	"\x10WorkerLoadsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a>\n" +
	"\x10TimerWorkerEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aA\n" +
	"\x13TaskCompletionEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1a=\n" +
	"\x0fTaskResultEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1aW\n" +
	"\x0fTaskAssignEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.scheduler.NodeList.TaskR\x05value:\x028\x01\"H\n" +
	"\x0fRequestVoteArgs\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x05R\x04term\x12!\n" +
	"\fcandidate_id\x18\x02 \x01(\x05R\vcandidateId\"I\n" +
	"\x10RequestVoteReply\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x05R\x04term\x12!\n" +
	"\fvote_granted\x18\x02 \x01(\bR\vvoteGranted\"4\n" +
	"\n" +
	"WorkerLoad\x12\x12\n" +
	"\x04port\x18\x01 \x01(\x05R\x04port\x12\x12\n" +
	"\x04load\x18\x02 \x01(\x05R\x04load\"x\n" +
	"\x0eTaskAssignment\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\x05R\x06taskId\x12\x1b\n" +
	"\ttask_type\x18\x02 \x01(\x05R\btaskType\x12\x14\n" +
	"\x05query\x18\x03 \x01(\tR\x05query\x12\x1a\n" +
	"\bpriority\x18\x04 \x01(\x05R\bpriority\"2\n" +
	"\x16TaskAssignmentResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"\a\n" +
	"\x05Empty\" \n" +
	"\n" +
	"ServerPort\x12\x12\n" +
	"\x04port\x18\x01 \x01(\x05R\x04port\" \n" +
	"\n" +
	"ClientPort\x12\x12\n" +
	"\x04port\x18\x01 \x01(\x05R\x04port\"Q\n" +
	"\n" +
	"RaftServer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x19\n" +
	"\bis_voter\x18\x03 \x01(\bR\aisVoter\"D\n" +
	"\x11RaftConfiguration\x12/\n" +
	"\aservers\x18\x01 \x03(\v2\x15.scheduler.RaftServerR\aservers\";\n" +
	"\x0fAddVoterRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress2\x89\x03\n" +
	"\n" +
	"LeaderNode\x12:\n" +
	"\rGetServerPort\x12\x10.scheduler.Empty\x1a\x15.scheduler.ServerPort\"\x00\x12?\n" +
	"\tHeartbeat\x12\x1b.scheduler.HeartbeatRequest\x1a\x13.scheduler.NodeList\"\x00\x12D\n" +
	"\x10GetConfiguration\x12\x10.scheduler.Empty\x1a\x1c.scheduler.RaftConfiguration\"\x00\x12:\n" +
	"\bAddVoter\x12\x1a.scheduler.AddVoterRequest\x1a\x10.scheduler.Empty\"\x00\x127\n" +
	"\n" +
	"ReportLoad\x12\x15.scheduler.WorkerLoad\x1a\x10.scheduler.Empty\"\x00\x12C\n" +
	"\x16TaskCompletionResponse\x12\x15.scheduler.Task_Reply\x1a\x10.scheduler.Empty\"\x002\x93\x02\n" +
	"\n" +
	"ServerNode\x121\n" +
	"\tHeartbeat\x12\x10.scheduler.Empty\x1a\x10.scheduler.Empty\"\x00\x12H\n" +
	"\vRequestVote\x12\x1a.scheduler.RequestVoteArgs\x1a\x1b.scheduler.RequestVoteReply\"\x00\x12L\n" +
	"\n" +
	"AssignTask\x12\x19.scheduler.TaskAssignment\x1a!.scheduler.TaskAssignmentResponse\"\x00\x12:\n" +
	"\rGetServerPort\x12\x10.scheduler.Empty\x1a\x15.scheduler.ServerPort\"\x002\xc7\x01\n" +
	"\tScheduler\x12;\n" +
	"\tQueryTask\x12\x15.scheduler.Task_Query\x1a\x15.scheduler.Task_Reply\"\x00\x12<\n" +
	"\x0fQueryClientPort\x12\x10.scheduler.Empty\x1a\x15.scheduler.ClientPort\"\x00\x12?\n" +
	"\rGetTaskStatus\x12\x15.scheduler.Task_Reply\x1a\x15.scheduler.TaskStatus\"\x00B\x1cZ\x1aDistributed_Project-/protob\x06proto3"

var (
	file_proto_scheduler_proto_rawDescOnce sync.Once
	file_proto_scheduler_proto_rawDescData []byte
)

func file_proto_scheduler_proto_rawDescGZIP() []byte {
	file_proto_scheduler_proto_rawDescOnce.Do(func() {
		file_proto_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_scheduler_proto_rawDesc), len(file_proto_scheduler_proto_rawDesc)))
	})
	return file_proto_scheduler_proto_rawDescData
}

var file_proto_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_proto_scheduler_proto_goTypes = []any{
	(*HeartbeatRequest)(nil),       // 0: scheduler.HeartbeatRequest
	(*TaskStatus)(nil),             // 1: scheduler.TaskStatus
	(*Task_Query)(nil),             // 2: scheduler.Task_Query
	(*Task_Reply)(nil),             // 3: scheduler.Task_Reply
	(*NodeList)(nil),               // 4: scheduler.NodeList
	(*RequestVoteArgs)(nil),        // 5: scheduler.RequestVoteArgs
	(*RequestVoteReply)(nil),       // 6: scheduler.RequestVoteReply
	(*WorkerLoad)(nil),             // 7: scheduler.WorkerLoad
	(*TaskAssignment)(nil),         // 8: scheduler.TaskAssignment
	(*TaskAssignmentResponse)(nil), // 9: scheduler.TaskAssignmentResponse
	(*Empty)(nil),                  // 10: scheduler.Empty
	(*ServerPort)(nil),             // 11: scheduler.ServerPort
	(*ClientPort)(nil),             // 12: scheduler.ClientPort
	(*RaftServer)(nil),             // 13: scheduler.RaftServer
	(*RaftConfiguration)(nil),      // 14: scheduler.RaftConfiguration
	(*AddVoterRequest)(nil),        // 15: scheduler.AddVoterRequest
	(*NodeList_Task)(nil),          // 16: scheduler.NodeList.Task
	nil,                            // 17: scheduler.NodeList.TaskQueueEntry
	nil,                            // 18: scheduler.NodeList.WorkerLoadsEntry
	nil,                            // 19: scheduler.NodeList.TimerWorkerEntry
	nil,                            // 20: scheduler.NodeList.TaskCompletionEntry
	nil,                            // 21: scheduler.NodeList.TaskResultEntry
	nil,                            // 22: scheduler.NodeList.TaskAssignEntry
}
var file_proto_scheduler_proto_depIdxs = []int32{
	17, // 0: scheduler.NodeList.taskQueue:type_name -> scheduler.NodeList.TaskQueueEntry
	18, // 1: scheduler.NodeList.workerLoads:type_name -> scheduler.NodeList.WorkerLoadsEntry
	19, // 2: scheduler.NodeList.timer_worker:type_name -> scheduler.NodeList.TimerWorkerEntry
	20, // 3: scheduler.NodeList.taskCompletion:type_name -> scheduler.NodeList.TaskCompletionEntry
	21, // 4: scheduler.NodeList.taskResult:type_name -> scheduler.NodeList.TaskResultEntry
	22, // 5: scheduler.NodeList.taskAssign:type_name -> scheduler.NodeList.TaskAssignEntry
	13, // 6: scheduler.RaftConfiguration.servers:type_name -> scheduler.RaftServer
	16, // 7: scheduler.NodeList.TaskQueueEntry.value:type_name -> scheduler.NodeList.Task
	16, // 8: scheduler.NodeList.TaskAssignEntry.value:type_name -> scheduler.NodeList.Task
	10, // 9: scheduler.LeaderNode.GetServerPort:input_type -> scheduler.Empty
	0,  // 10: scheduler.LeaderNode.Heartbeat:input_type -> scheduler.HeartbeatRequest
	10, // 11: scheduler.LeaderNode.GetConfiguration:input_type -> scheduler.Empty
	15, // 12: scheduler.LeaderNode.AddVoter:input_type -> scheduler.AddVoterRequest
	7,  // 13: scheduler.LeaderNode.ReportLoad:input_type -> scheduler.WorkerLoad
	3,  // 14: scheduler.LeaderNode.TaskCompletionResponse:input_type -> scheduler.Task_Reply
	10, // 15: scheduler.ServerNode.Heartbeat:input_type -> scheduler.Empty
	5,  // 16: scheduler.ServerNode.RequestVote:input_type -> scheduler.RequestVoteArgs
	8,  // 17: scheduler.ServerNode.AssignTask:input_type -> scheduler.TaskAssignment
	10, // 18: scheduler.ServerNode.GetServerPort:input_type -> scheduler.Empty
	2,  // 19: scheduler.Scheduler.QueryTask:input_type -> scheduler.Task_Query
	10, // 20: scheduler.Scheduler.QueryClientPort:input_type -> scheduler.Empty
	3,  // 21: scheduler.Scheduler.GetTaskStatus:input_type -> scheduler.Task_Reply
	11, // 22: scheduler.LeaderNode.GetServerPort:output_type -> scheduler.ServerPort
	4,  // 23: scheduler.LeaderNode.Heartbeat:output_type -> scheduler.NodeList
	14, // 24: scheduler.LeaderNode.GetConfiguration:output_type -> scheduler.RaftConfiguration
	10, // 25: scheduler.LeaderNode.AddVoter:output_type -> scheduler.Empty
	10, // 26: scheduler.LeaderNode.ReportLoad:output_type -> scheduler.Empty
	10, // 27: scheduler.LeaderNode.TaskCompletionResponse:output_type -> scheduler.Empty
	10, // 28: scheduler.ServerNode.Heartbeat:output_type -> scheduler.Empty
	6,  // 29: scheduler.ServerNode.RequestVote:output_type -> scheduler.RequestVoteReply
	9,  // 30: scheduler.ServerNode.AssignTask:output_type -> scheduler.TaskAssignmentResponse
	11, // 31: scheduler.ServerNode.GetServerPort:output_type -> scheduler.ServerPort
	3,  // 32: scheduler.Scheduler.QueryTask:output_type -> scheduler.Task_Reply
	12, // 33: scheduler.Scheduler.QueryClientPort:output_type -> scheduler.ClientPort
	1,  // 34: scheduler.Scheduler.GetTaskStatus:output_type -> scheduler.TaskStatus
	22, // [22:35] is the sub-list for method output_type
	9,  // [9:22] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_scheduler_proto_init() }
func file_proto_scheduler_proto_init() {
	if File_proto_scheduler_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_scheduler_proto_rawDesc), len(file_proto_scheduler_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_proto_scheduler_proto_goTypes,
		DependencyIndexes: file_proto_scheduler_proto_depIdxs,
		MessageInfos:      file_proto_scheduler_proto_msgTypes,
	}.Build()
	File_proto_scheduler_proto = out.File
	file_proto_scheduler_proto_goTypes = nil
	file_proto_scheduler_proto_depIdxs = nil
}
