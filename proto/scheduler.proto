
syntax = "proto3";

package scheduler;
option go_package = "Distributed_Project-/proto";

service LeaderNode {
    rpc GetServerPort(Empty) returns (ServerPort) {}
    rpc Heartbeat(HeartbeatRequest) returns (NodeList) {}
    rpc GetConfiguration(Empty) returns (RaftConfiguration) {}
    rpc AddVoter(AddVoterRequest) returns (Empty) {}
    rpc ReportLoad(WorkerLoad) returns (Empty) {}
    rpc TaskCompletionResponse(Task_Reply) returns (Empty){};

}

service ServerNode {
    rpc Heartbeat(Empty) returns (Empty) {}
    rpc RequestVote(RequestVoteArgs) returns (RequestVoteReply) {}
    rpc AssignTask(TaskAssignment) returns (TaskAssignmentResponse) {}
    rpc GetServerPort(Empty) returns (ServerPort) {}
}

service Scheduler{
    rpc QueryTask(Task_Query) returns (Task_Reply) {};
    rpc QueryClientPort(Empty) returns (ClientPort) {};
    rpc GetTaskStatus(Task_Reply) returns (TaskStatus) {};
}

message HeartbeatRequest {
    int32 port = 1;
}

message TaskStatus {
    bool status = 1;
    int32 result  = 2;
}

message Task_Query {
    int32 task_type = 1;
    string data_query = 2;
    int32 priority = 3;
    repeated int32 dependency_list = 4;
}

message Task_Reply {
    int32 task_id = 1;
    int32 result = 2;
}

message NodeList {
    repeated int32 nodes_port = 1;
    int32 leader_port = 2;
    int32 client_port =3;
    int32 task_id = 4;  // task id sstarter
    message Task {
        int32 id = 1;
        int32 task_type = 2;
        int32 priority = 3;
        string query = 4;
        int32 assigned_to = 5;
        bool status = 6;
        repeated int32 dependency_list = 7;
    }
    map<int32, Task> taskQueue = 5;
    map<int32, float> workerLoads = 6; // Changed to float for CPU percentage
    map<int32, string> timer_worker = 7; // Assuming time is represented as a string
    map<int32, bool> taskCompletion = 8;
    map<int32, int32> taskResult = 9; // Changed to int32 for task id
    map<int32, Task> taskAssign = 10;
}

message RequestVoteArgs {
    int32 term=1;
    int32 candidate_id=2;
}

message RequestVoteReply {
    int32 term=1;  
    bool vote_granted=2;
}

message WorkerLoad {
    int32 port = 1;
    int32 load = 2;
}

message TaskAssignment {
    int32 task_id = 1;
    int32 task_type = 2;
    string query = 3;
    int32 priority = 4;
}

message TaskAssignmentResponse {
    bool success = 1;
}


message Empty {}
message ServerPort {
    int32 port = 1;
}

message ClientPort {
    int32 port = 1;
}

message RaftServer {
    string id = 1;
    string address = 2;
    bool is_voter = 3;
}

message RaftConfiguration {
    repeated RaftServer servers = 1;
}

message AddVoterRequest {
    string id = 1;
    string address = 2;
}
