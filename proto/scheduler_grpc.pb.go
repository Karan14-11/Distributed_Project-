// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/scheduler.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeaderNode_GetServerPort_FullMethodName          = "/scheduler.LeaderNode/GetServerPort"
	LeaderNode_Heartbeat_FullMethodName              = "/scheduler.LeaderNode/Heartbeat"
	LeaderNode_GetConfiguration_FullMethodName       = "/scheduler.LeaderNode/GetConfiguration"
	LeaderNode_AddVoter_FullMethodName               = "/scheduler.LeaderNode/AddVoter"
	LeaderNode_ReportLoad_FullMethodName             = "/scheduler.LeaderNode/ReportLoad"
	LeaderNode_TaskCompletionResponse_FullMethodName = "/scheduler.LeaderNode/TaskCompletionResponse"
)

// LeaderNodeClient is the client API for LeaderNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderNodeClient interface {
	GetServerPort(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerPort, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*NodeList, error)
	GetConfiguration(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RaftConfiguration, error)
	AddVoter(ctx context.Context, in *AddVoterRequest, opts ...grpc.CallOption) (*Empty, error)
	ReportLoad(ctx context.Context, in *WorkerLoad, opts ...grpc.CallOption) (*Empty, error)
	TaskCompletionResponse(ctx context.Context, in *Task_Reply, opts ...grpc.CallOption) (*Empty, error)
}

type leaderNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderNodeClient(cc grpc.ClientConnInterface) LeaderNodeClient {
	return &leaderNodeClient{cc}
}

func (c *leaderNodeClient) GetServerPort(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerPort, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerPort)
	err := c.cc.Invoke(ctx, LeaderNode_GetServerPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderNodeClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*NodeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeList)
	err := c.cc.Invoke(ctx, LeaderNode_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderNodeClient) GetConfiguration(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RaftConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RaftConfiguration)
	err := c.cc.Invoke(ctx, LeaderNode_GetConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderNodeClient) AddVoter(ctx context.Context, in *AddVoterRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, LeaderNode_AddVoter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderNodeClient) ReportLoad(ctx context.Context, in *WorkerLoad, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, LeaderNode_ReportLoad_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderNodeClient) TaskCompletionResponse(ctx context.Context, in *Task_Reply, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, LeaderNode_TaskCompletionResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderNodeServer is the server API for LeaderNode service.
// All implementations must embed UnimplementedLeaderNodeServer
// for forward compatibility.
type LeaderNodeServer interface {
	GetServerPort(context.Context, *Empty) (*ServerPort, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*NodeList, error)
	GetConfiguration(context.Context, *Empty) (*RaftConfiguration, error)
	AddVoter(context.Context, *AddVoterRequest) (*Empty, error)
	ReportLoad(context.Context, *WorkerLoad) (*Empty, error)
	TaskCompletionResponse(context.Context, *Task_Reply) (*Empty, error)
	mustEmbedUnimplementedLeaderNodeServer()
}

// UnimplementedLeaderNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeaderNodeServer struct{}

func (UnimplementedLeaderNodeServer) GetServerPort(context.Context, *Empty) (*ServerPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerPort not implemented")
}
func (UnimplementedLeaderNodeServer) Heartbeat(context.Context, *HeartbeatRequest) (*NodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedLeaderNodeServer) GetConfiguration(context.Context, *Empty) (*RaftConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedLeaderNodeServer) AddVoter(context.Context, *AddVoterRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVoter not implemented")
}
func (UnimplementedLeaderNodeServer) ReportLoad(context.Context, *WorkerLoad) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportLoad not implemented")
}
func (UnimplementedLeaderNodeServer) TaskCompletionResponse(context.Context, *Task_Reply) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCompletionResponse not implemented")
}
func (UnimplementedLeaderNodeServer) mustEmbedUnimplementedLeaderNodeServer() {}
func (UnimplementedLeaderNodeServer) testEmbeddedByValue()                    {}

// UnsafeLeaderNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderNodeServer will
// result in compilation errors.
type UnsafeLeaderNodeServer interface {
	mustEmbedUnimplementedLeaderNodeServer()
}

func RegisterLeaderNodeServer(s grpc.ServiceRegistrar, srv LeaderNodeServer) {
	// If the following call pancis, it indicates UnimplementedLeaderNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeaderNode_ServiceDesc, srv)
}

func _LeaderNode_GetServerPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderNodeServer).GetServerPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderNode_GetServerPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderNodeServer).GetServerPort(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderNode_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderNodeServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderNode_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderNodeServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderNode_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderNodeServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderNode_GetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderNodeServer).GetConfiguration(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderNode_AddVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderNodeServer).AddVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderNode_AddVoter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderNodeServer).AddVoter(ctx, req.(*AddVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderNode_ReportLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerLoad)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderNodeServer).ReportLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderNode_ReportLoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderNodeServer).ReportLoad(ctx, req.(*WorkerLoad))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderNode_TaskCompletionResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task_Reply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderNodeServer).TaskCompletionResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderNode_TaskCompletionResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderNodeServer).TaskCompletionResponse(ctx, req.(*Task_Reply))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaderNode_ServiceDesc is the grpc.ServiceDesc for LeaderNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.LeaderNode",
	HandlerType: (*LeaderNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerPort",
			Handler:    _LeaderNode_GetServerPort_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _LeaderNode_Heartbeat_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _LeaderNode_GetConfiguration_Handler,
		},
		{
			MethodName: "AddVoter",
			Handler:    _LeaderNode_AddVoter_Handler,
		},
		{
			MethodName: "ReportLoad",
			Handler:    _LeaderNode_ReportLoad_Handler,
		},
		{
			MethodName: "TaskCompletionResponse",
			Handler:    _LeaderNode_TaskCompletionResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scheduler.proto",
}

const (
	ServerNode_Heartbeat_FullMethodName     = "/scheduler.ServerNode/Heartbeat"
	ServerNode_RequestVote_FullMethodName   = "/scheduler.ServerNode/RequestVote"
	ServerNode_AssignTask_FullMethodName    = "/scheduler.ServerNode/AssignTask"
	ServerNode_GetServerPort_FullMethodName = "/scheduler.ServerNode/GetServerPort"
)

// ServerNodeClient is the client API for ServerNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerNodeClient interface {
	Heartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error)
	AssignTask(ctx context.Context, in *TaskAssignment, opts ...grpc.CallOption) (*TaskAssignmentResponse, error)
	GetServerPort(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerPort, error)
}

type serverNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewServerNodeClient(cc grpc.ClientConnInterface) ServerNodeClient {
	return &serverNodeClient{cc}
}

func (c *serverNodeClient) Heartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ServerNode_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNodeClient) RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestVoteReply)
	err := c.cc.Invoke(ctx, ServerNode_RequestVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNodeClient) AssignTask(ctx context.Context, in *TaskAssignment, opts ...grpc.CallOption) (*TaskAssignmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAssignmentResponse)
	err := c.cc.Invoke(ctx, ServerNode_AssignTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverNodeClient) GetServerPort(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerPort, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerPort)
	err := c.cc.Invoke(ctx, ServerNode_GetServerPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerNodeServer is the server API for ServerNode service.
// All implementations must embed UnimplementedServerNodeServer
// for forward compatibility.
type ServerNodeServer interface {
	Heartbeat(context.Context, *Empty) (*Empty, error)
	RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error)
	AssignTask(context.Context, *TaskAssignment) (*TaskAssignmentResponse, error)
	GetServerPort(context.Context, *Empty) (*ServerPort, error)
	mustEmbedUnimplementedServerNodeServer()
}

// UnimplementedServerNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerNodeServer struct{}

func (UnimplementedServerNodeServer) Heartbeat(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedServerNodeServer) RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedServerNodeServer) AssignTask(context.Context, *TaskAssignment) (*TaskAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTask not implemented")
}
func (UnimplementedServerNodeServer) GetServerPort(context.Context, *Empty) (*ServerPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerPort not implemented")
}
func (UnimplementedServerNodeServer) mustEmbedUnimplementedServerNodeServer() {}
func (UnimplementedServerNodeServer) testEmbeddedByValue()                    {}

// UnsafeServerNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerNodeServer will
// result in compilation errors.
type UnsafeServerNodeServer interface {
	mustEmbedUnimplementedServerNodeServer()
}

func RegisterServerNodeServer(s grpc.ServiceRegistrar, srv ServerNodeServer) {
	// If the following call pancis, it indicates UnimplementedServerNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerNode_ServiceDesc, srv)
}

func _ServerNode_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNodeServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNode_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNodeServer).Heartbeat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNode_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNodeServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNode_RequestVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNodeServer).RequestVote(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNode_AssignTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAssignment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNodeServer).AssignTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNode_AssignTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNodeServer).AssignTask(ctx, req.(*TaskAssignment))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerNode_GetServerPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerNodeServer).GetServerPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerNode_GetServerPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerNodeServer).GetServerPort(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerNode_ServiceDesc is the grpc.ServiceDesc for ServerNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.ServerNode",
	HandlerType: (*ServerNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _ServerNode_Heartbeat_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _ServerNode_RequestVote_Handler,
		},
		{
			MethodName: "AssignTask",
			Handler:    _ServerNode_AssignTask_Handler,
		},
		{
			MethodName: "GetServerPort",
			Handler:    _ServerNode_GetServerPort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scheduler.proto",
}

const (
	Scheduler_QueryTask_FullMethodName       = "/scheduler.Scheduler/QueryTask"
	Scheduler_QueryClientPort_FullMethodName = "/scheduler.Scheduler/QueryClientPort"
	Scheduler_GetTaskStatus_FullMethodName   = "/scheduler.Scheduler/GetTaskStatus"
)

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	QueryTask(ctx context.Context, in *Task_Query, opts ...grpc.CallOption) (*Task_Reply, error)
	QueryClientPort(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClientPort, error)
	GetTaskStatus(ctx context.Context, in *Task_Reply, opts ...grpc.CallOption) (*TaskStatus, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) QueryTask(ctx context.Context, in *Task_Query, opts ...grpc.CallOption) (*Task_Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task_Reply)
	err := c.cc.Invoke(ctx, Scheduler_QueryTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) QueryClientPort(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClientPort, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientPort)
	err := c.cc.Invoke(ctx, Scheduler_QueryClientPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetTaskStatus(ctx context.Context, in *Task_Reply, opts ...grpc.CallOption) (*TaskStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskStatus)
	err := c.cc.Invoke(ctx, Scheduler_GetTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations must embed UnimplementedSchedulerServer
// for forward compatibility.
type SchedulerServer interface {
	QueryTask(context.Context, *Task_Query) (*Task_Reply, error)
	QueryClientPort(context.Context, *Empty) (*ClientPort, error)
	GetTaskStatus(context.Context, *Task_Reply) (*TaskStatus, error)
	mustEmbedUnimplementedSchedulerServer()
}

// UnimplementedSchedulerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchedulerServer struct{}

func (UnimplementedSchedulerServer) QueryTask(context.Context, *Task_Query) (*Task_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTask not implemented")
}
func (UnimplementedSchedulerServer) QueryClientPort(context.Context, *Empty) (*ClientPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryClientPort not implemented")
}
func (UnimplementedSchedulerServer) GetTaskStatus(context.Context, *Task_Reply) (*TaskStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStatus not implemented")
}
func (UnimplementedSchedulerServer) mustEmbedUnimplementedSchedulerServer() {}
func (UnimplementedSchedulerServer) testEmbeddedByValue()                   {}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	// If the following call pancis, it indicates UnimplementedSchedulerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Scheduler_ServiceDesc, srv)
}

func _Scheduler_QueryTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task_Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).QueryTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_QueryTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).QueryTask(ctx, req.(*Task_Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_QueryClientPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).QueryClientPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_QueryClientPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).QueryClientPort(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task_Reply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_GetTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetTaskStatus(ctx, req.(*Task_Reply))
	}
	return interceptor(ctx, in, info, handler)
}

// Scheduler_ServiceDesc is the grpc.ServiceDesc for Scheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryTask",
			Handler:    _Scheduler_QueryTask_Handler,
		},
		{
			MethodName: "QueryClientPort",
			Handler:    _Scheduler_QueryClientPort_Handler,
		},
		{
			MethodName: "GetTaskStatus",
			Handler:    _Scheduler_GetTaskStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scheduler.proto",
}
