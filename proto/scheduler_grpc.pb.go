// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/scheduler.proto

package scheduler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeaderNode_GetServerPort_FullMethodName = "/scheduler.LeaderNode/GetServerPort"
)

// LeaderNodeClient is the client API for LeaderNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderNodeClient interface {
	GetServerPort(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerPort, error)
}

type leaderNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderNodeClient(cc grpc.ClientConnInterface) LeaderNodeClient {
	return &leaderNodeClient{cc}
}

func (c *leaderNodeClient) GetServerPort(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerPort, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerPort)
	err := c.cc.Invoke(ctx, LeaderNode_GetServerPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderNodeServer is the server API for LeaderNode service.
// All implementations must embed UnimplementedLeaderNodeServer
// for forward compatibility.
type LeaderNodeServer interface {
	GetServerPort(context.Context, *Empty) (*ServerPort, error)
	mustEmbedUnimplementedLeaderNodeServer()
}

// UnimplementedLeaderNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeaderNodeServer struct{}

func (UnimplementedLeaderNodeServer) GetServerPort(context.Context, *Empty) (*ServerPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerPort not implemented")
}
func (UnimplementedLeaderNodeServer) mustEmbedUnimplementedLeaderNodeServer() {}
func (UnimplementedLeaderNodeServer) testEmbeddedByValue()                    {}

// UnsafeLeaderNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderNodeServer will
// result in compilation errors.
type UnsafeLeaderNodeServer interface {
	mustEmbedUnimplementedLeaderNodeServer()
}

func RegisterLeaderNodeServer(s grpc.ServiceRegistrar, srv LeaderNodeServer) {
	// If the following call pancis, it indicates UnimplementedLeaderNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeaderNode_ServiceDesc, srv)
}

func _LeaderNode_GetServerPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderNodeServer).GetServerPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderNode_GetServerPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderNodeServer).GetServerPort(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaderNode_ServiceDesc is the grpc.ServiceDesc for LeaderNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.LeaderNode",
	HandlerType: (*LeaderNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerPort",
			Handler:    _LeaderNode_GetServerPort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scheduler.proto",
}

// ServerNodeClient is the client API for ServerNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerNodeClient interface {
}

type serverNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewServerNodeClient(cc grpc.ClientConnInterface) ServerNodeClient {
	return &serverNodeClient{cc}
}

// ServerNodeServer is the server API for ServerNode service.
// All implementations must embed UnimplementedServerNodeServer
// for forward compatibility.
type ServerNodeServer interface {
	mustEmbedUnimplementedServerNodeServer()
}

// UnimplementedServerNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerNodeServer struct{}

func (UnimplementedServerNodeServer) mustEmbedUnimplementedServerNodeServer() {}
func (UnimplementedServerNodeServer) testEmbeddedByValue()                    {}

// UnsafeServerNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerNodeServer will
// result in compilation errors.
type UnsafeServerNodeServer interface {
	mustEmbedUnimplementedServerNodeServer()
}

func RegisterServerNodeServer(s grpc.ServiceRegistrar, srv ServerNodeServer) {
	// If the following call pancis, it indicates UnimplementedServerNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerNode_ServiceDesc, srv)
}

// ServerNode_ServiceDesc is the grpc.ServiceDesc for ServerNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.ServerNode",
	HandlerType: (*ServerNodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "proto/scheduler.proto",
}
